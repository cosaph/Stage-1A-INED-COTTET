---
title: "Afficher des cartes interactives avec Mapview"
toc-title: ""
categories:
  - R
  - R-Studio
author: "COTTET Coralie"
affiliations: INED

date: 06/06/2023

css: "sms.css"
---


Nous allons vous présenter trois packages permettant de générer des cartes interactives : __sf__ , __mapview___. 
Il faut donc au préalable installer ces deux packages. 
install.packages("sf")
install.packages("mapview")
install.packages("stringr") #qui sera utilisé pour traiter les données. 



```{r message=FALSE, warning=FALSE}
library("sf")
library("mapview")
library("stringr")
```


Dans un premier temps nous allons travailler avc __mapview__qui est une bibliothèque R qui permet d'afficher des données géospatiales interactives et de les explorer facilement. Elle offre une interface graphique conviviale qui permet de zoomer, de déplacer et de sélectionner des données géospatiales à l'aide de la souris. 

_Nous décidons de travailler sur Paris tout au long de ce tuto._

1. On télécharge les données des arrondissements de Paris à partir du site opendata.paris.fr et stocke les données dans l'objet arrondissements sous forme d'un objet de type sf _(spatial)_.


```{r results = 'hide'}
# Télécharger les données des arrondissements de Paris
arrondissements <- st_read(dsn = "https://opendata.paris.fr/explore/dataset/arrondissements/download/?format=geojson&timezone=Europe/Berlin&lang=fr")
```

2. On convertit l'objet en un dataframe pour pouvoir travailler dessus. 

```{r results='hide'}

# Convertir l'objet sf en un data.frame
arrondissements_df <- st_drop_geometry(arrondissements)

```

3. On supprime les colonnes qui ne sont pas nécessaires pour la représentation spatiale.

```{r results ='hide'}

# Supprimer les colonnes qui ne sont pas nécessaires pour la représentation spatiale
cols_to_remove <- c("datasetid", "recordid", "fields", "geometry_name", "type")
arrondissements_df <- arrondissements_df[, !(names(arrondissements_df) %in% cols_to_remove)]
```

4. On convertit les colonnes de type list en caractère et la liste en dataframe/

```{r results='hide'}


# Convertir les colonnes de type list en caractère
arrondissements_df <- lapply(arrondissements_df, function(x) if (is.list(x)) as.character(x) else x)

# Convertir la liste en data.frame
arrondissements_df <- as.data.frame(arrondissements_df)

```

5. On crée un exemple de données df composé de deux colonnes : 'id' et 'coordinates' (géocode et coordonées spatiale de chaque arrondissement.

Mes données sont sous la forme d'un vecteur c(a,b). Pour travailler plus simplement je travaille sur la colonne avec le vecteur en question pour créer deux colonnes latitude et longitude.


```{r results='hide'}


# Exemple de données
df <- data.frame(id = c(1, 2), coordinates = arrondissements_df$geom_x_y)


# Diviser la chaîne de caractères à la virgule et extraire la deuxième partie
coord_vec <- as.data.frame(strsplit(df$coordinates, ","))
coord_vec[1,] <- gsub("c", "", coord_vec[1,]) # je supprime le c
coord_vec[1,] <- gsub('\\(', "", coord_vec[1,]) # je supprime la parenthèse
coord_vec[2,] <- gsub('\\)', "", coord_vec[2,])


coord_vec[1,]<- as.numeric(coord_vec[1,])

coord_vec[2,]<- as.numeric(coord_vec[2,])


coord_vec_tranposee<-t(coord_vec)

# Afficher le résultat
arrondissements_df$lon<-coord_vec_tranposee[,1]
arrondissements_df$lat<-coord_vec_tranposee[,2]
```

6 . L'affichage de la carte interactive 

arrondissements_df est un data.frame qui contient des informations sur les arrondissements de Paris. Les colonnes lat et lon contiennent les coordonnées géographiques des centres de chaque arrondissement.

Le paramètre crs est utilisé pour spécifier le système de coordonnées de référence (en l'occurrence, ici, le code EPSG 4326 qui correspond aux coordonnées géographiques de latitude et longitude).

La fonction mapview() prend en entrée l'objet sf arrondissements_sf, ainsi que le nom des colonnes à utiliser pour représenter les données (zcol).
Dans cet exemple, les colonnes c_ar et l_aroff sont utilisées pour définir la couleur et l'étiquette de chaque arrondissement.
La fonction mapview() crée ensuite une carte interactive que vous pouvez explorer en cliquant et en faisant glisser la souris pour changer le niveau de zoom et la vue.

```{r resultd='hide'}


# Afficher les premières lignes du data.frame
arrondissements_sf <- st_as_sf(arrondissements_df, coords = c("lat","lon"), crs=4326)
# Retour au format sf pour appliquer la fonction mapview()
mapview(arrondissements_sf, zcol = c("c_ar","l_aroff"))

```

