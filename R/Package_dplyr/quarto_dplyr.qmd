---
title: "Faciliter la manipulation de données avec Dplyr"
toc-title: ""
categories:
  - R
author: "COTTET Coralie"
affiliations: INED

date: 06/06/2023

css: "style.css"
---
<img src="dplyr.png" alt="Texte alternatif de l'image" title="Titre de l'image" width="160" height="160" />

Nous utiliserons dplyr comme package.
dplyr est une grammaire de manipulation de données, fournissant un ensemble cohérent de verbes qui vous aide à résoudre les problèmes de manipulation de données les plus courants.
<https://www.rdocumentation.org/packages/dplyr/versions/0.7.8>

```{r message=FALSE}
# ---- Librairie nécessaire pour le code ----
library(dplyr) 
library(tidyverse) #pour utiliser "%>%" (ou pipe) définit en dessous

```
Une fois la librairie importée, nous devons importer les donnés pour pouvoir travailler dessus. Nous utilisons ici un exemple de fichier de traitement de données portant sur le titanic. Nous utiliserons le package Rio pour les importer.



```{r results='hide'}
data(starwars)
```
Mais comment puis-je __filtrer__ ma table pour n'obtenir que les passagers situé dans la classe 2 à bord du titanic ?

Le "pipe" ou opérateur "%>%" en R permet d'enchaîner les opérations sur une table sans avoir à répéter le nom de la table à chaque étape. Cela simplifie la syntaxe et rend le code plus lisible en permettant d'écrire des enchaînements d'opérations sur une table de manière plus concise et efficace.
```{r message=FALSE}

starwars<-starwars %>% filter(species=="Human")
# sans l'opérateur %>% on aurait : 
starwars_filtered <- filter(starwars, species == "Human")
# une autre façon de filter sans utiliser le package dplyr est 
starwars_filtered <- starwars[starwars$species == "Human", ]

```
Comment est-ce que je peut __ajouter__ des données à mon dataframe?

```{r results='hide'}
#avec dplyr on utilise la fonction mutate() pour ajouter des colonnes
# a notre dataframe. Pour afficher la nouvelle colonne dans le dataframe 
#on rajoute la commande select(nouvelle_colonne,everything())
starwars %>% mutate(moyenne=mean(is.na(mass))) %>% select(moyenne,everything())

```

Comment est-ce que je peux _selectionner_  uniquement les colonnes qui m'interesse pour mon travail?

```{r results='hide'}
starwars %>% select(species,gender) #on selectionne ici l'espèce et le genre

```

Comment est-ce que je peux __grouper__ mes données ?

```{r results='hide'}

starwars %>% group_by(species) # regroupe par espèce

#La fonction tapply() est une autre fonction de base de R 
#qui permet de regrouper les données selon une ou plusieurs variables
avg_height_by_species <- tapply(starwars$height, starwars$species, mean, na.rm = TRUE)

#La fonction aggregate() est une fonction de base de R qui permet de regrouper les données selon une ou plusieurs variables 
avg_height_by_species <- aggregate(starwars$height, by = list(starwars$species), FUN = mean, na.rm = TRUE)


```


Pour en apprendre plus sur dplyr :

<https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html>
