---
title: "Générer un nuage de mot à partir d'un texte avec R.temis"
toc-title: ""
categories:
- R
- R-Studio
author: "COTTET Coralie"
affiliations: INED

date: 06/06/2023

---



# 1. Travail préliminaire 

Les packages "R.temis", "dplyr" et "tibble" sont nécessaires pour ce code car ils contiennent des fonctions et des outils qui sont utilisés pour manipuler et analyser les données textuelles.

Le package "R.temis" fournit des fonctions pour le traitement du langage naturel, telles que la lemmatisation, la tokenisation et l'analyse de sentiment. Ces fonctions sont utilisées dans le code pour analyser les tweets et extraire les mots clés.

Le package "dplyr" fournit des fonctions pour la manipulation de données, telles que la sélection de colonnes, le filtrage de données et l'agrégation de données. Ces fonctions sont utilisées dans le code pour nettoyer et préparer les données textuelles.

Le package "tibble" fournit une classe de données pour stocker des données tabulaires, qui est plus efficace que la classe de données par défaut de R. Cette classe de données est utilisée dans le code pour stocker les données textuelles nettoyées et préparées.

Il est nécessaire d'installer ces packages une fois sur un ordinateur, car ils ne sont pas inclus dans l'installation de base de R. Ensuite, les packages doivent être chargés à chaque fois que le code est exécuté en utilisant la fonction "library". Cela permet d'utiliser les fonctions et les outils fournis par les packages dans le code.

install.packages("R.temis") 
install.packages("dplyr")
install.packages("tibble")



```{r warning=FALSE, message= FALSE}
library("R.temis")
library("dplyr") #Pour le traitement du texte voir la fiche "Faciliter la manipulation de données avec Dplyr".
library("tibble")
```


Concernant le choix des données, j’ai choisis les voeux de François Hollande allant de 2013 à 2017. Les textes retranscrits dans des fichiers de type texte (.txt) et placé dans un seul dossier nommé _dossier_de_texte_. Il est important de vérifer l'encodage de vos textes pour la suite du code. Ici, l'encodage est _UTF-8_.

```{r message=FALSE }

corpus1 <- import_corpus("dossier_de_texte", format="txt", language ="fr")
corpus<-split_documents(corpus1, 5, preserveMetadata = TRUE)


```


# 2. Nettoyage du texte

C'est quoi les __stop_words__?

Les stop words (ou mots vides) sont des mots très courants d’une langue comme les prépositions, les articles, les pronoms, etc., qui sont souvent omis lors de l’analyse de texte car en général ils ne portent pas de sens important pour la compréhension globale du texte.
La fonction build_dtm est utilisée pour construire une matrice de termes-document (ou tableau lexical) à partir d’un corpus de textes. La matrice de termes-document (ou Tableau Lexical) est une représentation quantitative d'un corpus de textes, où chaque colonne représente un terme et chaque ligne représente un document.

```{r}
# Création du tableau lexical sans mots outils et avec les mots d’au moins 1 lettre
dtm <-build_dtm(corpus, remove_stopwords = T, min_length = 1)
# Création d'un dictionnaire de mot
dic <-dictionary(dtm) 
# Calcul des occurrences des mots dans le corpus de textes
frequent_terms(dtm) 

```

# 3. Traitement du corpus

J’aimerais aussi retirer les mots “a” et “plus” et rassembler sous un même mot  les termes “tout”, “toutes” et “tous” en “tous.tes” à titre d’exemple.

```{r}

dic2 = dic %>%
  rownames_to_column(var="word") %>% 
  mutate(Term = word)

row.names(dic2) <- dic2$word

# Remplacer les mots spécifiés par tous.tes
dic2$Term[dic2$word == "toutes"] <- "tous.tes"
dic2$Term[dic2$word == "tout"] <- "tous.tes"
dic2$Term[dic2$word == "tous"] <- "tous.tes"

# Lemmatisation
dtmlem <-combine_terms(dtm, dic2)

# Ensemble de mots à retirer
mots_a_retirer <- c("a", "plus")

# Suppression de mots dans le tablrau lexical
dtm2<-dtmlem[, !colnames(dtmlem) %in% mots_a_retirer]


frequent_terms(dtm2)
```

#4. Affichage du Nuage de mot

Ce graphique permet de visualiser les mots les plus fréquents d’un corpus de textes (et préciser que tu as supprimé des mots, tu en as regroupés …) 
```{r}

# On affiche au maximum 50 mots et les mots d’au moins une occurrence
cloud<-word_cloud(dtm2, color= 'black', min.freq=1,n =50) 

```



# 5. Affichage d’un graphe de mots

La fonction terms_graph du package R.temis permet de générer un réseau de mots qui est affiché dans une fenêtre interactive igraph. Les termes ou mots sont représentés par des sommets ou nœuds dans le graphe, les liens représentent les cooccurrences entre les mots dans les documents. Leur placement dans l’espace graphique est déterminé par un algorithme d’énergie. Ici,ce n’est pas très représentatif mais ça donne globalement une idée de ce que peut nous fournir un tel graphe: l’idée globale des thématiques et des sujets traités dans le
corpus.

```{r}
# Créer un graphique d'analyse de co-occurrences de termes



Tree<-terms_graph(dtm2, min_occ = 10, interactive = T,
            vertex.size = 0.01, vertex.color = "lightblue",
            label.cex = 0.1)


```

<img src="tree.png" alt="Texte alternatif de l'image" title="Titre de l'image" width=500 lenght=500/>



# 6. Pour aller plus loin

<https://rtemis.hypotheses.org/r-temis-dans-rstudio>










































